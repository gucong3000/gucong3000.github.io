/*
 *	textbox.htc - copyright 2004-2010, GuCong
 *	http://gucong.co.cc/textbox/
 *	http://www.gnu.org/licenses/gpl.html
 */

/*
 *	为IE10以下版本提供placeholder和autofocus两种HTML5属性的支持
 *	为IE6、7提供文本框的:focus支持
 *	为IE6提供input[type="text"]等支持
 */
<PUBLIC:COMPONENT lightWeight="true">
<PUBLIC:ATTACH EVENT="oncontentready" FOR="element" ONEVENT="elmReady()" />
<PUBLIC:PROPERTY name="autofocus" />

<PUBLIC:PROPERTY name="placeholder" put="setPlaceholder" get="getPlaceholder" />
<PUBLIC:ATTACH EVENT="onresize" FOR="element" ONEVENT="givePlaceholder()" />
<PUBLIC:ATTACH EVENT="onfocus" FOR="element" ONEVENT="elmFocus()" />
<PUBLIC:ATTACH EVENT="onblur" FOR="element" ONEVENT="elmBlur()" />
 
<SCRIPT LANGUAGE="JScript">

var tt,
	css,
	cssBlur,
	cssFocus,
	text = "",
	elm = element,
	doc = elm.document;

function setFocus(){
	setTimeout(function(){
		elm.focus();
	}, 0);
}

if( !(doc.documentMode > 7) ){
	css = " " + elm.tagName.toLowerCase();

	if( /^input$/i.test(elm.tagName ) ) {
		css += "_" + elm.type;
		if ( !("XMLHttpRequest" in window ) ){
			elm.className += css;
		}
	}

	cssFocus = css + "_focus";
	cssBlur = new RegExp( "\\b" + cssFocus + "\\b" , "ig");
}

function elmReady(){
	if(autofocus != null){
		setFocus();
	}
}

function givePlaceholder(){
	if( text && !elm.value ){
		if( !tt ){
			tt = doc.createElement(elm.tagName.toLowerCase() + "-placeholder");
			tt.onmousedown = setFocus;

			with(tt.runtimeStyle) {
				bottom = right = left = top = "auto";
				verticalAlign = "middle";
				width = height = "auto";
				position = "absolute";
				padding = margin = 0;
				background = "none";
				//color = "darkGray";
				border = 0;
			}
		}
		var eleStyle = elm.currentStyle;
		tt.style.left = eleStyle.marginLeft;
		tt.style.top = eleStyle.marginTop;
		with(tt.runtimeStyle) {
			marginLeft = elm.clientLeft + tt.style.pixelLeft;
			marginTop =  elm.clientTop + tt.style.pixelTop;
			paddingLeft = eleStyle.paddingLeft;
			fontFamily = eleStyle.fontFamily;
			fontSize = eleStyle.fontSize;
			cursor = eleStyle.cursor;

			if ( /^input$/i.test(elm.tagName )){
				lineHeight = elm.offsetHeight + "px";
			} else {
				lineHeight = eleStyle.lineHeight;
				paddingTop = eleStyle.paddingTop;
				width = elm.clientWidth;
			}
		}
		tt.style.display = "inline-block";
		tt.innerHTML = text;
		elm.parentNode.insertBefore(tt, elm);
	} else if( tt ) {
		tt.innerHTML = "";
	}
}

function getPlaceholder(){
	return text;
}

function setPlaceholder( val ){
	text = val;
	givePlaceholder();
}

function elmBlur(){
	givePlaceholder();
	if(tt){
		tt.runtimeStyle.display = "";
	}

	if(cssBlur){
		elm.className = elm.className.replace( cssBlur , "" );
	}
}

function elmFocus(){
	if(tt){
		tt.runtimeStyle.display = "none";
	}
	if(cssFocus){
		elm.className += (cssFocus);
	}
}

</SCRIPT>
</PUBLIC:COMPONENT>
